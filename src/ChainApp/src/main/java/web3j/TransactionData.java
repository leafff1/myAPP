package web3j;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class TransactionData extends Contract {
    public static String BINARY = "";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_bank\",\"type\":\"string\"},{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"goods\",\"type\":\"string\"}],\"name\":\"fromBank\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from1\",\"type\":\"string\"},{\"name\":\"to1\",\"type\":\"string\"},{\"name\":\"goods1\",\"type\":\"string\"},{\"name\":\"to2\",\"type\":\"string\"},{\"name\":\"goods2\",\"type\":\"string\"},{\"name\":\"_mount\",\"type\":\"uint256\"}],\"name\":\"transferTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receipts_\",\"outputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"mount\",\"type\":\"uint256\"},{\"name\":\"goods\",\"type\":\"string\"},{\"name\":\"return_date\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"remark\",\"type\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rid\",\"type\":\"uint256\"}],\"name\":\"searchForReceiptWithId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"goods\",\"type\":\"string\"}],\"name\":\"payback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"string\"},{\"name\":\"_goods\",\"type\":\"string\"}],\"name\":\"searchForReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"companies_\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"address1\",\"type\":\"string\"},{\"name\":\"property\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"string\"},{\"name\":\"_property\",\"type\":\"string\"}],\"name\":\"createCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"c\",\"type\":\"string\"}],\"name\":\"searchForCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time_now\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"string\"}],\"name\":\"getMyDueLousList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"string\"},{\"name\":\"_mount\",\"type\":\"uint256\"},{\"name\":\"_goods\",\"type\":\"string\"},{\"name\":\"_return_date\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"string\"},{\"name\":\"_remark\",\"type\":\"string\"}],\"name\":\"registerTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time_now\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"string\"}],\"name\":\"getMyOwnDueList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"companyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"address1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"property\",\"type\":\"string\"}],\"name\":\"NewCompany\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"mount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"goods\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"return_date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"remark\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"exist\",\"type\":\"bool\"}],\"name\":\"NewReceipt\",\"type\":\"event\"}]";

    public static final String FUNC_FROMBANK = "fromBank";

    public static final String FUNC_TRANSFERTRANSACTION = "transferTransaction";

    public static final String FUNC_RECEIPTS_ = "receipts_";

    public static final String FUNC_SEARCHFORRECEIPTWITHID = "searchForReceiptWithId";

    public static final String FUNC_PAYBACK = "payback";

    public static final String FUNC_SEARCHFORRECEIPT = "searchForReceipt";

    public static final String FUNC_COMPANIES_ = "companies_";

    public static final String FUNC_CREATECOMPANY = "createCompany";

    public static final String FUNC_SEARCHFORCOMPANY = "searchForCompany";

    public static final String FUNC_GETMYDUELOUSLIST = "getMyDueLousList";

    public static final String FUNC_REGISTERTRANSACTION = "registerTransaction";

    public static final String FUNC_GETMYOWNDUELIST = "getMyOwnDueList";

    public static final Event NEWCOMPANY_EVENT = new Event("NewCompany", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWRECEIPT_EVENT = new Event("NewReceipt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected TransactionData(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TransactionData(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TransactionData(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TransactionData(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> fromBank(String _bank, String from, String to, String goods) {
        final Function function = new Function(
                FUNC_FROMBANK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bank), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void fromBank(String _bank, String from, String to, String goods, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_FROMBANK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bank), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String fromBankSeq(String _bank, String from, String to, String goods) {
        final Function function = new Function(
                FUNC_FROMBANK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bank), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transferTransaction(String from1, String to1, String goods1, String to2, String goods2, BigInteger _mount) {
        final Function function = new Function(
                FUNC_TRANSFERTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to2), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods2), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_mount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferTransaction(String from1, String to1, String goods1, String to2, String goods2, BigInteger _mount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to2), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods2), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_mount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferTransactionSeq(String from1, String to1, String goods1, String to2, String goods2, BigInteger _mount) {
        final Function function = new Function(
                FUNC_TRANSFERTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to2), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods2), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_mount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple8<String, String, BigInteger, String, BigInteger, String, String, Boolean>> receipts_(BigInteger param0) {
        final Function function = new Function(FUNC_RECEIPTS_, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<String, String, BigInteger, String, BigInteger, String, String, Boolean>>(
                new Callable<Tuple8<String, String, BigInteger, String, BigInteger, String, String, Boolean>>() {
                    @Override
                    public Tuple8<String, String, BigInteger, String, BigInteger, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, BigInteger, String, BigInteger, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> searchForReceiptWithId(BigInteger rid) {
        final Function function = new Function(
                FUNC_SEARCHFORRECEIPTWITHID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void searchForReceiptWithId(BigInteger rid, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SEARCHFORRECEIPTWITHID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String searchForReceiptWithIdSeq(BigInteger rid) {
        final Function function = new Function(
                FUNC_SEARCHFORRECEIPTWITHID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(rid)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> payback(String from, String to, String goods) {
        final Function function = new Function(
                FUNC_PAYBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void payback(String from, String to, String goods, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_PAYBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String paybackSeq(String from, String to, String goods) {
        final Function function = new Function(
                FUNC_PAYBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(goods)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> searchForReceipt(String _from, String _to, String _goods) {
        final Function function = new Function(
                FUNC_SEARCHFORRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_goods)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void searchForReceipt(String _from, String _to, String _goods, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SEARCHFORRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_goods)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String searchForReceiptSeq(String _from, String _to, String _goods) {
        final Function function = new Function(
                FUNC_SEARCHFORRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_goods)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple3<String, String, String>> companies_(BigInteger param0) {
        final Function function = new Function(FUNC_COMPANIES_, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createCompany(String _name, String _address, String _property) {
        final Function function = new Function(
                FUNC_CREATECOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_address), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_property)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createCompany(String _name, String _address, String _property, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATECOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_address), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_property)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createCompanySeq(String _name, String _address, String _property) {
        final Function function = new Function(
                FUNC_CREATECOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_address), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_property)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> searchForCompany(String c) {
        final Function function = new Function(
                FUNC_SEARCHFORCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(c)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void searchForCompany(String c, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SEARCHFORCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(c)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String searchForCompanySeq(String c) {
        final Function function = new Function(
                FUNC_SEARCHFORCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(c)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> getMyDueLousList(BigInteger time_now, String to) {
        final Function function = new Function(
                FUNC_GETMYDUELOUSLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time_now), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getMyDueLousList(BigInteger time_now, String to, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETMYDUELOUSLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time_now), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getMyDueLousListSeq(BigInteger time_now, String to) {
        final Function function = new Function(
                FUNC_GETMYDUELOUSLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time_now), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> registerTransaction(String _from, String _to, BigInteger _mount, String _goods, BigInteger _return_date, String _status, String _remark) {
        final Function function = new Function(
                FUNC_REGISTERTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_mount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_goods), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_return_date), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerTransaction(String _from, String _to, BigInteger _mount, String _goods, BigInteger _return_date, String _status, String _remark, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_mount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_goods), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_return_date), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_remark)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerTransactionSeq(String _from, String _to, BigInteger _mount, String _goods, BigInteger _return_date, String _status, String _remark) {
        final Function function = new Function(
                FUNC_REGISTERTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_mount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_goods), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_return_date), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> getMyOwnDueList(BigInteger time_now, String from) {
        final Function function = new Function(
                FUNC_GETMYOWNDUELIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time_now), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getMyOwnDueList(BigInteger time_now, String from, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETMYOWNDUELIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time_now), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getMyOwnDueListSeq(BigInteger time_now, String from) {
        final Function function = new Function(
                FUNC_GETMYOWNDUELIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(time_now), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public List<NewCompanyEventResponse> getNewCompanyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWCOMPANY_EVENT, transactionReceipt);
        ArrayList<NewCompanyEventResponse> responses = new ArrayList<NewCompanyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewCompanyEventResponse typedResponse = new NewCompanyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.companyId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.address1 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.property = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerNewCompanyEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(NEWCOMPANY_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerNewCompanyEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(NEWCOMPANY_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<NewReceiptEventResponse> getNewReceiptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWRECEIPT_EVENT, transactionReceipt);
        ArrayList<NewReceiptEventResponse> responses = new ArrayList<NewReceiptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewReceiptEventResponse typedResponse = new NewReceiptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiptId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.mount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.goods = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.return_date = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.remark = (String) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.exist = (Boolean) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerNewReceiptEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(NEWRECEIPT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerNewReceiptEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(NEWRECEIPT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static TransactionData load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TransactionData(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TransactionData load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TransactionData(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TransactionData load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TransactionData(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TransactionData load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TransactionData(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TransactionData> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TransactionData.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TransactionData> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TransactionData.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<TransactionData> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TransactionData.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TransactionData> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TransactionData.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class NewCompanyEventResponse {
        public Log log;

        public BigInteger companyId;

        public String name;

        public String address1;

        public String property;
    }

    public static class NewReceiptEventResponse {
        public Log log;

        public BigInteger receiptId;

        public String from;

        public String to;

        public BigInteger mount;

        public String goods;

        public BigInteger return_date;

        public String status;

        public String remark;

        public Boolean exist;
    }
}
